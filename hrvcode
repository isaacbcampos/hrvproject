#include <SPI.h> 
#include <SD.h>   
#include <stdlib.h>  
const int CS = 10; 
char dataString[7];
// all above is about sd card
const int livingledIBI = LED_BUILTIN;
int sensorPin = 0;
int Signal = 0;
int idle = 0;
double IBI = 600;                  // 600ms per beat = 100 Beats Per Minute (BPM)
bool  Pulse = false;
int  lastBeatTime = 0;
double  P = 512;                    // peak at 1/2 the input range of 0..1023
double  T = 512;                    // trough at 1/2 the input range.
double  threshSetting = 550;        // used to seed and reset the thresh variable
double  thresh = 550;     // threshold a little above the trough
double  amp = 100;                  // beat amplitude 1/10 of input range.
bool  firstBeat = true;           // looking for the first beat
bool  secondBeat = false;         // not yet looking for the second beat in a row
bool debug = false; // change 2 true to see the raw signal

void setup ()
{
  pinMode(10, OUTPUT);
  Serial.begin(115200);
  Serial.print("Carregando cartao SD...");
  if (!SD.begin(CS))
  {
    Serial.println("Falha no cartao SD!");
    return;
  }
  Serial.println("SD carregado.");
}
void loop ()
{ 
  Signal = analogRead(sensorPin);
  //double Signal = analogRead(sensorPin);
  //Serial.println(rawValue);

  int now = millis();

  int N = now - lastBeatTime;      // monitor the time since the last beat to avoid noise

  //  find the peak and trough of the pulse wave
  if (Signal < thresh && N > (IBI / 5) * 3) { // avoid dichrotic noise by waiting 3/5 of last IBI
    if (Signal < T) {                        // T is the trough
      T = Signal;                            // keep track of lowest point in pulse wave
    }
  }

  if (Signal > thresh && Signal > P) {       // thresh condition helps avoid noise
    P = Signal;                              // P is the peak
  }                                          // keep track of highest point in pulse wave

  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
  // signal surges up in value every time there is a pulse
  if (N > 250) {                             // avoid high frequency noise
    if ( (Signal > thresh) && (Pulse == false) && (N > (IBI / 5) * 3) ) {
      Pulse = true;                          // set the Pulse flag when we think there is a pulse
      IBI = now - lastBeatTime;    // measure time between beats in mS
      lastBeatTime = now;          // keep track of time for next pulse
      idle = 0;
      
      if(!debug){
    
    dtostrf(IBI,5,2,dataString); //sets IBI to sd
    File pulsoIsaac = SD.open("pulso.txt", FILE_WRITE); //open pulso.txt 
    pulsoIsaac.println(dataString); // write IBI to sd
    pulsoIsaac.close(); // closes pulso.txt and save data
    
    //Serial.print(IBI);
    //Serial.print(",");
    Serial.println(dataString);
     
     }

      if (secondBeat) {                      // if this is the second beat, if secondBeat == TRUE
        secondBeat = false;                  // clear secondBeat flag
      }

      if (firstBeat) {                       // if it's the first time we found a beat, if firstBeat == TRUE
        firstBeat = false;                   // clear firstBeat flag
        secondBeat = true;                   // set the second beat flag
        // IBI value is unreliable so discard it
        return;
      }
    }
  }

  if (Signal < thresh && Pulse == true) {  // when the values are going down, the beat is over
    Pulse = false;                         // reset the Pulse flag so we can do it again
    amp = P - T;                           // get amplitude of the pulse wave
    thresh = amp / 2 + T;                  // set thresh at 50% of the amplitude
    P = thresh;                            // reset these for next time
    T = thresh;
  }

  if (N > 2500) {                          // if 2.5 seconds go by without a beat
    thresh = threshSetting;                // set thresh default
    P = 512;                               // set P default
    T = 512;                               // set T default
    lastBeatTime = now;          // bring the lastBeatTime up to date
    firstBeat = true;                      // set these to avoid noise
    secondBeat = false;                    // when we get the heartbeat back
    idle++;
  }

  if (idle >= 4){
    Serial.println("cls");
    idle = 0;
  }
  
  if(debug){
    Serial.print(Signal);
     Serial.print(",");
    Serial.println(IBI);
  }
  if(Signal > thresh){                          // If the signal is above "550", then "turn-on" Arduino's LED.
     digitalWrite(livingledIBI,HIGH);
   } else {
     digitalWrite(livingledIBI,LOW);                //  Else, the sigal must be below "550", so "turn-off" this LED.
     delay(20);
}
}
