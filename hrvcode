#include <SPI.h>  
#include <SD.h>   
#include <stdlib.h>  
const int CS = 10; 
// Tudo acima é inclusão de bibliotecas do módulo SD
char dataString[7]; // configura os caracteres que serão enviados ao SD 
const int livingledIBI = LED_BUILTIN; // constante do led onboard
int sensorPin = 0; 
int Signal = 0;
int idle = 0;  
double IBI = 600;         // padrão de entre intervalo entre batida utilizado p/ detectar batidas
bool  Pulse = false; 
int  lastBeatTime = 0;
double  P = 512;                    // configura uma variável de pico para metade do input range
double  T = 512;                    // configura uma variável de depressão para metade do input range
double  threshSetting = 500;        // utilizado para resetar o sinal
double  thresh = 550;     // variável limiar utilizada para achar o pico da onda
double  amp = 100;                  // variável importante para amplitude do sinal
bool  firstBeat = true;           // procurando a primeira batida
bool  secondBeat = false;        
bool debug = true; // mudar de false para true caso queira ver o sinal bruto

void setup ()
{
  pinMode(10, OUTPUT); // pino 10 é porta de entrada dos dados 
  Serial.begin(115200);
  Serial.print("Carregando cartao SD...");
  if (!SD.begin(CS))
// algoritmo para printar na serial se o cartão sd carregar ou não
  {
    Serial.println("Falha no cartao SD!");
    return;
  }
  Serial.println("SD carregado.");
}
void loop ()
{ 
  Signal = analogRead(sensorPin); // inicia o loop lendo os inputs vindo da entrada 0
  int now = millis();

  int N = now - lastBeatTime;      // monitora o tempo desde o último pulso para evitar ruído

  //  acha o pico e a depressão do pulso
  if (Signal < thresh && N > (IBI / 5) * 3) { // espera 3/5 do pulso p/ pegar o pico, evita nó dicrótico
    if (Signal < T) {                        // T é a depressão da onda
      T = Signal;                            // acompanha o ponto mais baixo da onda
    }
  }

  if (Signal > thresh && Signal > P) {       // thresh auxilia como um filtro para evitar ruido
    P = Signal;                              //P é o pico onda
  }                                          // acompanha o pico da onda

  // Agora achando a primeira batida
  // sinal aumenta em valor toda vez que há um pulso
  if (N > 250) {                             // evita ruído de alta frequência
    if ( (Signal > thresh) && (Pulse == false) && (N > (IBI / 5) * 3) ) {
      Pulse = true;                          // define uma bandeira de pulso quando pensamos que há um pulso
      IBI = now - lastBeatTime;    // mede o tempo em ms entre as batidas
      lastBeatTime = now;          // atualiza o tempo para próxima batida
      idle = 0;
      
      if(!debug){  //se debug for falso e tiver pulso, cria um arquivo txt, abre e registra o IBI
    
    dtostrf(IBI,5,2,dataString); // formato do ibi no sd
    File pulsoIsaac = SD.open("pulso.txt", FILE_WRITE); 
    pulsoIsaac.println(dataString); 
    pulsoIsaac.close(); // fecha o arquivo e salva o IBI
    Serial.println(dataString);
     
     }

      if (secondBeat) {                      // se houver uma segunda batida limpa a bandeira 
        secondBeat = false;                
      }

      if (firstBeat) {                       // se acharmos pulso novamente
        firstBeat = false;                   // limpa a bandeira de primeira batida
        secondBeat = true;                   // configura a segunda batida
        return;
      }
    }
  }

  if (Signal < thresh && Pulse == true) {  // quando os valores diminuem o pulso acaba
    Pulse = false;                         // reseta a bandeira de pulse pra podermos fazer tudo novamente
    amp = P - T;                           // pega a amplitude da onda
    thresh = amp / 2 + T;                  // configura o limiar para 50% da amplitude
    P = thresh;                            // reseta esses pro próximo ciclo
    T = thresh;
  }

  if (N > 2500) {                          // se passar 2,5 seg sem batida reseta tudo
    thresh = threshSetting;                // configura o limiar padrão
    P = 512;                               // reseta P padrão
    T = 512;                               // reseta T padrão
    lastBeatTime = now;          // atualiza o tempo da última batida
    firstBeat = true;                      
    secondBeat = false;                    // se tiver uma nova batida ..
    idle++;
  }

  if (idle >= 4){
    Serial.println("cls");
    idle = 0;
  }
  // algoritmo para visualizar o sinal bruto caso algum bug ocorra
  if(debug){ 
    Serial.print(Signal);
     Serial.print(",");
    Serial.println(IBI);
  }
  if(Signal > thresh){                          //pisca o led assim que houver um batimento
     digitalWrite(livingledIBI,HIGH);
   } else {
     digitalWrite(livingledIBI,LOW);             
     delay(20);
}
}

